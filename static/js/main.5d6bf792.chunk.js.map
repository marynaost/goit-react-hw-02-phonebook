{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ContactList/Contact.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["ContactForm","state","name","number","nameInputId","shortid","generate","numberInputId","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","htmlFor","type","pattern","title","required","onChange","id","Component","Contact","contact","onDeleteContact","onClick","ContactList","contacts","length","map","Filter","App","filter","addContact","newContacts","find","toLowerCase","alert","deleteContacts","contactsId","prevState","changeFilter","getFilteredContacts","normalizedFilter","includes","filteredContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d6bf792.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport shortid from 'shortid';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  static propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n  };\r\n\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label htmlFor={this.nameInputId}>\r\n            Name\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={this.state.name}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n              required\r\n              onChange={this.handleChange}\r\n              id={this.nameInputId}\r\n            />\r\n          </label>\r\n          <label htmlFor={this.numberInputId}>\r\n            Number\r\n            <input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={this.state.number}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n              required\r\n              onChange={this.handleChange}\r\n              id={this.numberInputId}\r\n            />\r\n          </label>\r\n          <button type=\"submit\">Add contact</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import PropTypes from 'prop-types';\r\nconst Contact = ({ contact, onDeleteContact }) => (\r\n  <>\r\n    <span>\r\n      {contact.name}: {contact.number}\r\n    </span>\r\n    <button type=\"button\" onClick={() => onDeleteContact(contact.id)}>\r\n      Delete\r\n    </button>\r\n  </>\r\n);\r\n\r\nContact.propTypes = {\r\n  contact: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Contact;\r\n","import PropTypes from 'prop-types';\r\nimport Contact from './Contact';\r\n\r\nfunction ContactList({ contacts, onDeleteContact }) {\r\n  return contacts.length === 0 ? (\r\n    <div>You haven't contacts!</div>\r\n  ) : (\r\n    <ul>\r\n      {contacts.map(contact => (\r\n        <li key={contact.id}>\r\n          <Contact contact={contact} onDeleteContact={onDeleteContact} />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ).isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import PropTypes from 'prop-types';\r\n\r\nfunction Filter({ value, onChange }) {\r\n  return (\r\n    <>\r\n      <label>\r\n        Find contact by name\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n          value={value}\r\n          onChange={onChange}\r\n        />\r\n      </label>\r\n    </>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nexport default Filter;\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  static propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      }).isRequired,\n    ),\n    filter: PropTypes.string,\n  };\n\n  addContact = ({ name, number }) => {\n    const { contacts } = this.state;\n    const newContacts = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    contacts.find(\n      contact => newContacts.name.toLowerCase() === contact.name.toLowerCase(),\n    )\n      ? alert(`${newContacts.name} is already in contacts`)\n      : this.setState(({ contacts }) => ({\n          contacts: [newContacts, ...contacts],\n        }));\n  };\n\n  deleteContacts = contactsId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactsId),\n    }));\n  };\n\n  changeFilter = e => {\n    this.setState({ filter: e.target.value });\n  };\n\n  getFilteredContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const filteredContacts = this.getFilteredContacts();\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={this.addContact} />\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={this.changeFilter} />\n        <ContactList\n          contacts={filteredContacts}\n          onDeleteContact={this.deleteContacts}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}